[BASE_INFO]
# The app name will be applied to all processes including agent service integration.
appname = 'sample_standard_app'

# The placeholder "${ROOT_PACKAGE}" is mapped to the value of "ROOT_PACKAGE" defined in this file.
# It allows you to conveniently manage multiple different agent applications by configuring the root package value.
[PACKAGE_PATH_INFO]
ROOT_PACKAGE = 'sample_standard_app'

[CORE_PACKAGE]
# Perform a full component scan and registration for all the paths under this list.
default = ['${ROOT_PACKAGE}.intelligence.agentic']
# Scan and register agent components for all paths under this list, with priority over the default.
agent = ['${ROOT_PACKAGE}.intelligence.agentic.agent']
# Scan and register knowledge components for all paths under this list, with priority over the default.
knowledge = ['${ROOT_PACKAGE}.intelligence.agentic.knowledge']
# Scan and register llm components for all paths under this list, with priority over the default.
llm = ['${ROOT_PACKAGE}.intelligence.agentic.llm']
# Scan and register planner components for all paths under this list, with priority over the default.
planner = []
# Scan and register tool components for all paths under this list, with priority over the default.
tool = ['${ROOT_PACKAGE}.intelligence.agentic.tool']
# Scan and register toolkit components for all paths under this list, with priority over the default.
toolkit = ['${ROOT_PACKAGE}.intelligence.agentic.toolkit']
# Scan and register memory components for all paths under this list, with priority over the default.
memory = ['${ROOT_PACKAGE}.intelligence.agentic.memory']
# Scan and register service components for all paths under this list, with priority over the default.
service = ['${ROOT_PACKAGE}.intelligence.service.agent_service']
# Scan and register prompt components for all paths under this list, with priority over the default.
prompt = ['${ROOT_PACKAGE}.intelligence.agentic.prompt']
# Scan and register product components for all paths under this list, with priority over the default.
product = ['${ROOT_PACKAGE}.platform.difizen.product']
## Scan and register workflow components for all paths under this list, with priority over the default.
#workflow = ['${ROOT_PACKAGE}.platform.difizen.workflow']
# Scan and register store components for all paths under this list, with priority over the default.
store = ['${ROOT_PACKAGE}.intelligence.agentic.knowledge.store']
# Scan and register rag_router components for all paths under this list, with priority over the default.
rag_router = ['${ROOT_PACKAGE}.intelligence.agentic.knowledge.rag_router']
# Scan and register doc_processor components for all paths under this list, with priority over the default.
doc_processor = ['${ROOT_PACKAGE}.intelligence.agentic.knowledge.doc_processor']
# Scan and register query_paraphraser components for all paths under this list, with priority over the default.
query_paraphraser = ['${ROOT_PACKAGE}.intelligence.agentic.knowledge.query_paraphraser']
# Scan and register memory_compressor components for all paths under this list, with priority over the default.
memory_compressor = ['${ROOT_PACKAGE}.intelligence.agentic.memory.memory_compressor']
# Scan and register memory_storage components for all paths under this list, with priority over the default.
memory_storage = ['${ROOT_PACKAGE}.intelligence.agentic.memory.memory_storage']
# Scan and register log_sink components for all paths under this list, with priority over the default.
log_sink = ['${ROOT_PACKAGE}.intelligence.utils.log_sink']

llm_channel = ['${ROOT_PACKAGE}.intelligence.agentic.llm']

[SUB_CONFIG_PATH]
# Log config file path, an absolute path or a relative path based on the dir where the current config file is located.
log_config_path = './log_config.toml'
# Custom key file path, use to save your own secret key like open ai or sth else. REMEMBER TO ADD IT TO .gitignore.
custom_key_path = './custom_key.toml'

[DB]
# A sqlalchemy db uri used for storing various info, for example, service request, generated during application running.
# If it's empty, agentUniverse will create a local sqlite db as default choice.
system_db_uri = ''

[GUNICORN]
# Use gunicorn as http server when activate is 'true', or only use flask.
activate = 'false'
# Gunicorn config file path, an absolute path or a relative path based on the dir where the current config file is located.
gunicorn_config_path = './gunicorn_config.toml'

[GRPC]
activate = 'false'
max_workers = 10
server_port = 50051

[MONITOR]
activate = false
dir = './monitor'

[EXTENSION_MODULES]
class_list = [
    '${ROOT_PACKAGE}.config.config_extension.ConfigExtension',
    '${ROOT_PACKAGE}.config.yaml_func_extension.YamlFuncExtension'
]
